import { useEffect, useMemo, useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { ALL_PERMS, ROLES, type Permission, type RoleId, type User } from '@/types/auth';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Separator } from '@/components/ui/separator';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Eye, EyeOff, RefreshCw } from 'lucide-react';

const schema = z.object({
  name: z.string().min(2, 'Nome obrigatório'),
  email: z.string().email('E-mail inválido'),
  phone: z.string().optional(),
  roleId: z.enum(['admin', 'producao', 'comercial', 'viewer'] as const),
  permissions: z.array(z.custom<Permission>()).nonempty('Selecione ao menos 1 permissão'),
  status: z.enum(['ativo', 'inativo'] as const),
  password: z.string().min(6, 'Mínimo de 6 caracteres').optional(), // obrigatório só no "criar"
});

type Props = {
  open: boolean;
  onOpenChange: (v: boolean) => void;
  onSubmitCreate: (data: z.infer<typeof schema>) => Promise<void>;
  onSubmitEdit: (id: string, data: z.infer<typeof schema>) => Promise<void>;
  mode: 'create' | 'edit';
  editingUser?: User | null;
};

export function UserFormDialog({ open, onOpenChange, onSubmitCreate, onSubmitEdit, mode, editingUser }: Props) {
  const [showPwd, setShowPwd] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  const defaultPerms = useMemo(() => {
    const role = ROLES.find(r => r.id === (editingUser?.roleId ?? 'viewer'));
    return role?.permissions ?? [];
  }, [editingUser?.roleId]);

  const form = useForm<z.infer<typeof schema>>({
    resolver: zodResolver(schema),
    defaultValues: {
      name: editingUser?.name ?? '',
      email: editingUser?.email ?? '',
      phone: editingUser?.phone ?? '',
      roleId: (editingUser?.roleId ?? 'viewer') as RoleId,
      permissions: editingUser?.permissions ?? defaultPerms,
      status: (editingUser?.status ?? 'ativo') as 'ativo' | 'inativo',
      password: '',
    },
  });

  // quando trocar role, sincroniza permissões com preset (pode customizar depois)
  useEffect(() => {
    const sub = form.watch((values, { name }) => {
      if (name === 'roleId' && values.roleId) {
        const preset = ROLES.find(r => r.id === values.roleId)?.permissions ?? [];
        form.setValue('permissions', preset, { shouldValidate: true });
      }
    });
    return () => sub.unsubscribe?.();
  }, [form]);

  const genPassword = () => {
    const p = Math.random().toString(36).slice(-10) + 'A!';
    form.setValue('password', p, { shouldValidate: true });
  };

  const handleSubmit = form.handleSubmit(async (data) => {
    // senha obrigatória apenas no create
    if (mode === 'create' && !data.password) {
      form.setError('password', { message: 'Informe uma senha ou gere automaticamente' });
      return;
    }
    try {
      setSubmitting(true);
      if (mode === 'create') await onSubmitCreate(data);
      else if (editingUser) await onSubmitEdit(editingUser.id, data);
      onOpenChange(false);
    } catch (err) {
      // Mostra mensagem básica de erro no topo do form
      form.setError('root', { message: 'Falha ao salvar. Verifique os dados e tente novamente.' });
    } finally {
      setSubmitting(false);
    }
  });

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-3xl p-0">
        <DialogHeader>
          <DialogTitle>{mode === 'create' ? 'Novo Usuário' : 'Editar Usuário'}</DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="flex flex-col max-h-[80vh]">
          <div className="overflow-y-auto px-6 pb-6 space-y-6">
            {form.formState.errors.root?.message && (
              <p className="text-sm text-red-500">{form.formState.errors.root.message}</p>
            )}
            <div className="grid md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="name">Nome</Label>
              <Input id="name" {...form.register('name')} />
              <p className="text-xs text-red-500">{form.formState.errors.name?.message}</p>
            </div>
            <div>
              <Label htmlFor="email">E-mail</Label>
              <Input id="email" type="email" {...form.register('email')} />
              <p className="text-xs text-red-500">{form.formState.errors.email?.message}</p>
            </div>
            <div>
              <Label htmlFor="phone">Telefone</Label>
              <Input id="phone" placeholder="(xx) xxxxx-xxxx" {...form.register('phone')} />
            </div>
            <div>
              <Label>Papel</Label>
              <Select
                value={form.watch('roleId')}
                onValueChange={(v: RoleId) => form.setValue('roleId', v, { shouldValidate: true })}
              >
                <SelectTrigger aria-label="Selecione o papel">
                  <SelectValue placeholder="Selecione" />
                </SelectTrigger>
                <SelectContent>
                  {ROLES.map(r => (
                    <SelectItem key={r.id} value={r.id}>{r.name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label>Status</Label>
              <Select
                value={form.watch('status')}
                onValueChange={(v: 'ativo' | 'inativo') => form.setValue('status', v, { shouldValidate: true })}
              >
                <SelectTrigger aria-label="Selecione o status">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="ativo">Ativo</SelectItem>
                  <SelectItem value="inativo">Inativo</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="md:col-span-2">
              <Label>Senha {mode === 'edit' && <span className="text-muted-foreground">(opcional)</span>}</Label>
              <div className="flex gap-2">
                <Input
                  type={showPwd ? 'text' : 'password'}
                  placeholder={mode === 'create' ? 'Mínimo 6 caracteres' : 'Deixe vazio para não alterar'}
                  {...form.register('password')}
                />
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button type="button" variant="secondary" onClick={() => setShowPwd(s => !s)} aria-label={showPwd ? 'Ocultar senha' : 'Mostrar senha'}>
                        {showPwd ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>{showPwd ? 'Ocultar' : 'Mostrar'}</TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                <Button type="button" variant="outline" onClick={genPassword} aria-label="Gerar senha">
                  <RefreshCw className="h-4 w-4 mr-1" /> Gerar
                </Button>
              </div>
              <p className="text-xs text-red-500">{form.formState.errors.password?.message}</p>
            </div>
          </div>

          <Separator />

          <div className="space-y-3">
            <div className="flex items-center gap-2">
              <Label>Permissões</Label>
              <Badge variant="secondary">{form.watch('permissions').length} selecionadas</Badge>
            </div>
            <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-3">
              {ALL_PERMS.map((perm) => {
                const checked = form.watch('permissions').includes(perm);
                return (
                  <label key={perm} className="flex items-center gap-2 border rounded-lg p-3 hover:bg-muted cursor-pointer">
                    <Checkbox
                      aria-label={`Permissão ${perm}`}
                      checked={checked}
                      onCheckedChange={(v) => {
                        const cur = new Set(form.getValues('permissions'));
                        v ? cur.add(perm) : cur.delete(perm);
                        form.setValue('permissions', Array.from(cur), { shouldValidate: true });
                      }}
                    />
                    <span className="capitalize">{perm}</span>
                  </label>
                );
              })}
            </div>
            <p className="text-xs text-red-500">{form.formState.errors.permissions?.message}</p>
          </div>

          </div>
          <DialogFooter className="px-6 py-4 border-t">
            <Button type="button" variant="ghost" onClick={() => onOpenChange(false)} disabled={submitting}>Cancelar</Button>
            <Button type="submit" disabled={submitting}>
              {submitting ? (mode === 'create' ? 'Criando...' : 'Salvando...') : (mode === 'create' ? 'Criar' : 'Salvar')}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}
