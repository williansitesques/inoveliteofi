import { useEffect, useMemo, useState } from 'react';import { useNavigate, useParams } from 'react-router-dom';import { useStore } from '@/store/useStore';import { Button } from '@/components/ui/button';import { Input } from '@/components/ui/input';import { Label } from '@/components/ui/label';import { Textarea } from '@/components/ui/textarea';import { Badge } from '@/components/ui/badge';import { Checkbox } from '@/components/ui/checkbox';import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue,} from '@/components/ui/select';import { Sheet, SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetTitle,} from '@/components/ui/sheet';import { Card, CardContent, CardDescription, CardHeader, CardTitle,} from '@/components/ui/card';import { Plus, X, GripVertical, Save, Send, ArrowLeft, ShoppingCart, Scissors, Shirt, Paintbrush, Package2, CheckCircle, Archive, Truck, Edit,} from 'lucide-react';import { toast } from 'sonner';import { format } from 'date-fns';import { ptBR } from 'date-fns/locale';import { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors,} from '@dnd-kit/core';import { arrayMove, SortableContext, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy,} from '@dnd-kit/sortable';import { CSS } from '@dnd-kit/utilities';import type { Stage } from '@/store/types';const STAGE_TEMPLATES = [ { name: 'Compras', icon: ShoppingCart }, { name: 'Corte', icon: Scissors }, { name: 'Costura', icon: Shirt }, { name: 'Estamparia', icon: Paintbrush }, { name: 'Bordado', icon: Paintbrush }, { name: 'Acabamento', icon: Package2 }, { name: 'Qualidade', icon: CheckCircle }, { name: 'Embalagem', icon: Archive }, { name: 'Expedição', icon: Truck },];function SortableStageItem({ stage, index, onEdit, onRemove,}: { stage: Stage; index: number; onEdit: () => void; onRemove: () => void;}) { const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id: stage.id, }); const style = { transform: CSS.Transform.toString(transform), transition, opacity: isDragging ? 0.5 : 1, }; return ( <div ref={setNodeRef} style={style} className="flex items-center gap-3 p-4 bg-card border rounded-lg hover:shadow-md transition-shadow" > <button type="button" {...attributes} {...listeners} className="cursor-grab active:cursor-grabbing touch-none" > <GripVertical className="h-5 w-5 text-muted-foreground hover:text-foreground" /> </button> <div className="flex items-center gap-2 flex-1"> <Badge variant="outline" className="font-mono"> {index + 1} </Badge> <span className="font-medium">{stage.name}</span> <Badge variant={stage.kind === 'Interna' ? 'default' : 'secondary'}> {stage.kind} </Badge> {stage.responsible && ( <span className="text-sm text-muted-foreground">• {stage.responsible}</span> )} </div> <div className="flex items-center gap-2"> <Button type="button" variant="ghost" size="sm" onClick={onEdit} className="hover:bg-primary/10 hover:text-primary" > <Edit className="h-4 w-4" /> </Button> <Button type="button" variant="ghost" size="sm" onClick={onRemove} onPointerDown={(e) => e.stopPropagation()} className="hover:bg-destructive/10 hover:text-destructive" > <X className="h-4 w-4" /> </Button> </div> </div> );}export default function OPPlanner() { const { id } = useParams<{ id: string }>(); const navigate = useNavigate(); const { ops, pedidos, responsaveis, updateOP, addStage, removeStage, reorderStages, updateStage, addChecklistItem, renameChecklistItem, removeChecklistItem, toggleChecklist, addResponsavel, } = useStore(); const op = ops.find((o) => o.id === id); const pedido = pedidos.find((p) => p.id === op?.orderId); const [sheetOpen, setSheetOpen] = useState(false); const [editingStage, setEditingStage] = useState<Stage | null>(null); const [newStageName, setNewStageName] = useState(''); const [newChecklistItem, setNewChecklistItem] = useState(''); const [editingChecklistId, setEditingChecklistId] = useState<string | null>(null); const [editingChecklistText, setEditingChecklistText] = useState(''); const [newResponsavel, setNewResponsavel] = useState(''); const sensors = useSensors( useSensor(PointerSensor), useSensor(KeyboardSensor, { coordinateGetter: sortableKeyboardCoordinates, }) ); if (!op) { return ( <Card> <CardContent className="flex flex-col items-center justify-center py-16"> <p className="text-muted-foreground mb-4">OP não encontrada</p> <Button onClick={() => navigate('/ops')}> <ArrowLeft className="h-4 w-4 mr-2" /> Voltar para OPs </Button> </CardContent> </Card> ); } const handleDragEnd = (event: any) => { const { active, over } = event; if (active.id !== over.id) { const oldIndex = op.stages.findIndex((s) => s.id === active.id); const newIndex = op.stages.findIndex((s) => s.id === over.id); reorderStages(op.id, oldIndex, newIndex); } }; const handleAddStage = (name?: string) => { const stageName = name || newStageName; if (!stageName.trim()) { toast.error('Digite o nome da etapa'); return; } addStage(op.id, stageName); setNewStageName(''); toast.success('Etapa adicionada!'); }; const handleRemoveStage = (stageId: string) => { removeStage(op.id, stageId); toast.success('Etapa removida!'); }; const handleOpenStageConfig = (stage: Stage) => { setEditingStage(stage); setSheetOpen(true); }; const handleSaveStageConfig = () => { if (!editingStage) return; updateStage(op.id, editingStage.id, editingStage); setSheetOpen(false); setEditingStage(null); toast.success('Etapa atualizada!'); }; const handleAddChecklist = () => { if (!editingStage || !newChecklistItem.trim()) return; addChecklistItem(op.id, editingStage.id, newChecklistItem); setNewChecklistItem(''); // Update local state const updatedStage = { ...editingStage, checklist: [ ...editingStage.checklist, { id: Math.random().toString(36).substring(7), text: newChecklistItem, done: false, }, ], }; setEditingStage(updatedStage); toast.success('Item adicionado!'); }; const handleSaveDraft = () => { toast.success('Rascunho salvo!'); }; const handlePublish = () => { if (op.stages.length === 0) { toast.error('Adicione pelo menos uma etapa antes de publicar'); return; } updateOP(op.id, { publicada: true }); toast.success('OP publicada no painel!'); setTimeout(() => navigate('/kanban'), 500); }; const getTotalPlanejado = () => { if (!pedido) return 0; return pedido.items.reduce( (sum, item) => sum + Object.values(item.grade).reduce((s, qty) => s + (qty || 0), 0), 0 ); }; const getStageTotal = (stage: Stage) => { const qty = getTotalPlanejado(); const base = (stage.unitValue || 0) * qty; const freight = (stage.freightGo || 0) + (stage.freightBack || 0); const unexpected = stage.unexpected || 0; return base + freight + unexpected; }; return ( <div className="space-y-6"> <div className="flex items-center justify-between"> <Button variant="ghost" onClick={() => navigate('/ops')}> <ArrowLeft className="h-4 w-4 mr-2" /> Voltar </Button> <div className="flex gap-2"> <Button variant="outline" onClick={handleSaveDraft}> <Save className="h-4 w-4 mr-2" /> Salvar Rascunho </Button> <Button onClick={handlePublish}> <Send className="h-4 w-4 mr-2" /> Publicar no Painel </Button> </div> </div> {/* Header */} <Card> <CardHeader> <div className="flex items-start justify-between"> <div> <CardTitle className="text-2xl"> {op.id} {op.publicada && <Badge className="ml-2">Publicada</Badge>} </CardTitle> <CardDescription className="mt-2 space-y-1"> <div>Pedido: {op.orderId}</div> <div>Cliente: {op.clientName}</div> <div> SLA: {format(new Date(op.slaISO), 'dd/MM/yyyy HH:mm', { locale: ptBR })} </div> </CardDescription> </div> <div className="text-right"> <div className="text-2xl font-bold text-primary">{getTotalPlanejado()} pçs</div> <div className="text-sm text-muted-foreground">Quantidade Planejada</div> </div> </div> </CardHeader> </Card> {/* Stage Builder */} <Card> <CardHeader> <CardTitle>Construtor de Etapas</CardTitle> <CardDescription>Adicione e organize as etapas da produção</CardDescription> </CardHeader> <CardContent className="space-y-4"> {/* Manual Add */} <div className="flex gap-2"> <Input placeholder="Nome da etapa personalizada" value={newStageName} onChange={(e) => setNewStageName(e.target.value)} onKeyDown={(e) => e.key === 'Enter' && handleAddStage()} /> <Button onClick={() => handleAddStage()}> <Plus className="h-4 w-4 mr-2" /> Adicionar </Button> </div> {/* Templates */} <div className="flex flex-wrap gap-2"> {STAGE_TEMPLATES.map((template) => ( <Button key={template.name} variant="outline" size="sm" onClick={() => handleAddStage(template.name)} className="hover:bg-primary/10" > <template.icon className="h-4 w-4 mr-2" /> {template.name} </Button> ))} </div> {/* Stages List */} {op.stages.length > 0 && ( <div className="space-y-2 mt-6"> <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd} > <SortableContext items={op.stages.map((s) => s.id)} strategy={verticalListSortingStrategy} > {op.stages.map((stage, index) => ( <SortableStageItem key={stage.id} stage={stage} index={index} onEdit={() => handleOpenStageConfig(stage)} onRemove={() => handleRemoveStage(stage.id)} /> ))} </SortableContext> </DndContext> </div> )} {op.stages.length === 0 && ( <p className="text-center text-muted-foreground py-8"> Nenhuma etapa adicionada. Comece adicionando etapas acima. </p> )} </CardContent> </Card> {/* Stage Config Sheet */} <Sheet open={sheetOpen} onOpenChange={setSheetOpen}> <SheetContent className="sm:max-w-xl overflow-y-auto"> <SheetHeader> <SheetTitle>Configurar Etapa</SheetTitle> <SheetDescription>{editingStage?.name}</SheetDescription> </SheetHeader> {editingStage && ( <div className="grid gap-6 py-6"> <div className="grid gap-2"> <Label>Tipo</Label> <Select value={editingStage.kind} onValueChange={(value: 'Interna' | 'Terceirizada') => setEditingStage({ ...editingStage, kind: value }) } > <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="Interna">Interna</SelectItem> <SelectItem value="Terceirizada">Terceirizada</SelectItem> </SelectContent> </Select> </div> <div className="grid gap-2"> <Label>Responsável</Label> <div className="flex gap-2"> <Select value={editingStage.responsible} onValueChange={(value) => setEditingStage({ ...editingStage, responsible: value }) } > <SelectTrigger> <SelectValue placeholder="Selecione" /> </SelectTrigger> <SelectContent> {responsaveis.map((resp) => ( <SelectItem key={resp} value={resp}> {resp} </SelectItem> ))} </SelectContent> </Select> </div> <div className="flex gap-2 mt-2"> <Input placeholder="Novo responsável" value={newResponsavel} onChange={(e) => setNewResponsavel(e.target.value)} onKeyDown={(e) => { if (e.key === 'Enter' && newResponsavel.trim()) { addResponsavel(newResponsavel); setEditingStage({ ...editingStage, responsible: newResponsavel }); setNewResponsavel(''); } }} /> <Button size="sm" onClick={() => { if (newResponsavel.trim()) { addResponsavel(newResponsavel); setEditingStage({ ...editingStage, responsible: newResponsavel }); setNewResponsavel(''); } }} > <Plus className="h-4 w-4" /> </Button> </div> </div> <div className="grid gap-2"> <Label>Valor por Unidade (R$)</Label> <Input type="number" min="0" step="0.01" value={editingStage.unitValue || ''} onChange={(e) => setEditingStage({ ...editingStage, unitValue: parseFloat(e.target.value) || undefined, }) } /> </div> {editingStage.kind === 'Terceirizada' && ( <> <div className="grid grid-cols-2 gap-4"> <div className="grid gap-2"> <Label>Frete Ida (R$)</Label> <Input type="number" min="0" step="0.01" value={editingStage.freightGo || ''} onChange={(e) => setEditingStage({ ...editingStage, freightGo: parseFloat(e.target.value) || undefined, }) } /> </div> <div className="grid gap-2"> <Label>Frete Volta (R$)</Label> <Input type="number" min="0" step="0.01" value={editingStage.freightBack || ''} onChange={(e) => setEditingStage({ ...editingStage, freightBack: parseFloat(e.target.value) || undefined, }) } /> </div> </div> </> )} <div className="grid gap-2"> <Label>Imprevisto (R$)</Label> <Input type="number" min="0" step="0.01" value={editingStage.unexpected || ''} onChange={(e) => setEditingStage({ ...editingStage, unexpected: parseFloat(e.target.value) || undefined, }) } /> </div> <div className="grid gap-2"> <Label>Observação do Imprevisto</Label> <Textarea value={editingStage.unexpectedNote || ''} onChange={(e) => setEditingStage({ ...editingStage, unexpectedNote: e.target.value }) } rows={2} /> </div> {/* Checklist */} <div className="grid gap-4"> <div className="flex items-center justify-between"> <Label>Checklist da Etapa</Label> <Badge variant="outline"> {editingStage.checklist.filter((i) => i.done).length}/ {editingStage.checklist.length} </Badge> </div> <div className="flex gap-2"> <Input placeholder="Novo item do checklist" value={newChecklistItem} onChange={(e) => setNewChecklistItem(e.target.value)} onKeyDown={(e) => e.key === 'Enter' && handleAddChecklist()} /> <Button size="sm" onClick={handleAddChecklist} onPointerDown={(e) => e.stopPropagation()}> <Plus className="h-4 w-4" /> </Button> </div> <div className="space-y-2"> {editingStage.checklist.map((item) => ( <div key={item.id} className="flex items-center gap-3 p-3 bg-muted/30 rounded-lg" > <Checkbox checked={item.done} onCheckedChange={() => { toggleChecklist(op.id, editingStage.id, item.id); setEditingStage({ ...editingStage, checklist: editingStage.checklist.map((i) => i.id === item.id ? { ...i, done: !i.done } : i ), }); }} onPointerDown={(e) => e.stopPropagation()} /> {editingChecklistId === item.id ? ( <Input value={editingChecklistText} onChange={(e) => setEditingChecklistText(e.target.value)} onBlur={() => { if (editingChecklistText.trim()) { renameChecklistItem(op.id, editingStage.id, item.id, editingChecklistText); setEditingStage({ ...editingStage, checklist: editingStage.checklist.map((i) => i.id === item.id ? { ...i, text: editingChecklistText } : i ), }); } setEditingChecklistId(null); }} onKeyDown={(e) => { if (e.key === 'Enter') { e.currentTarget.blur(); } }} autoFocus /> ) : ( <span className={`flex-1 ${item.done ? 'line-through text-muted-foreground' : ''}`} onClick={() => { setEditingChecklistId(item.id); setEditingChecklistText(item.text); }} > {item.text} </span> )} <Button variant="ghost" size="sm" onClick={() => { removeChecklistItem(op.id, editingStage.id, item.id); setEditingStage({ ...editingStage, checklist: editingStage.checklist.filter((i) => i.id !== item.id), }); }} onPointerDown={(e) => e.stopPropagation()} className="hover:bg-destructive/10 hover:text-destructive" > <X className="h-4 w-4" /> </Button> </div> ))} </div> </div> {/* Total */} <div className="p-4 bg-primary/5 rounded-lg"> <div className="flex items-center justify-between"> <span className="font-medium">Total da Etapa</span> <span className="text-2xl font-bold text-primary"> R$ {getStageTotal(editingStage).toFixed(2)} </span> </div> <div className="text-xs text-muted-foreground mt-2"> {editingStage.unitValue && ( <div>Custo unitário: R$ {editingStage.unitValue} × {getTotalPlanejado()} pçs</div> )} {(editingStage.freightGo || editingStage.freightBack) && ( <div> Frete: R$ {((editingStage.freightGo || 0) + (editingStage.freightBack || 0)).toFixed(2)} </div> )} {editingStage.unexpected && ( <div>Imprevisto: R$ {editingStage.unexpected.toFixed(2)}</div> )} </div> </div> </div> )} <SheetFooter> <Button onClick={handleSaveStageConfig}>Salvar Configuração</Button> </SheetFooter> </SheetContent> </Sheet> </div> );}
